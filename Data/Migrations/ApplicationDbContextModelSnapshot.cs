// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SAMS.Data;

#nullable disable

namespace SAMS.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.ActivationModel", b =>
                {
                    b.Property<int>("StudId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudId"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudId");

                    b.ToTable("activationModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.ActiveCourseInfoModel", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<string>("CourseBellNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseLength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseRoomID")
                        .HasColumnType("int");

                    b.Property<string>("CourseTaughtDays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseTeacherID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubstituteSubID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseRoomID");

                    b.HasIndex("CourseTeacherID");

                    b.HasIndex("SubstituteSubID");

                    b.ToTable("activeCourseInfoModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.AdminInfoModel", b =>
                {
                    b.Property<string>("AdminID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdminID");

                    b.ToTable("adminInfoModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.AttendanceOfficeMemberModel", b =>
                {
                    b.Property<string>("AoMemberID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AoMemberEmailMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AoMemberFirstNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AoMemberLastNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AoMemberMiddleNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AoMemberPhoneMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AoMemberPreferredNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AoMemberID");

                    b.ToTable("attendanceOfficeMemberModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.BellAttendanceModel", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("BellAttendanceId")
                        .HasColumnType("int");

                    b.Property<int>("BellNumId")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonForAbsence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.ToTable("bellAttendanceModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.CounselorModel", b =>
                {
                    b.Property<string>("CounselorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CounselorEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CounselorFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CounselorLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CounselorMiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CounselorPhone")
                        .HasColumnType("int");

                    b.Property<string>("CounselorPreferredName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CounselorId");

                    b.ToTable("counselorModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.CourseEnrollmentModel", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"), 1L, 1);

                    b.Property<int>("EnrollmentCourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnrollmentStudentId")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("EnrollmentCourseId");

                    b.HasIndex("EnrollmentStudentId");

                    b.ToTable("courseEnrollmentModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.DailyAttendanceModel", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"), 1L, 1);

                    b.Property<DateTime?>("AttendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonForAbsence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("AttendanceId");

                    b.HasIndex("StudentId");

                    b.ToTable("dailyAttendanceModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.DailyBellScheduleModel", b =>
                {
                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("BellName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.HasKey("StartTime");

                    b.ToTable("dailyBellScheduleModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.DeveloperInfoModel", b =>
                {
                    b.Property<int>("DeveloperID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeveloperID"), 1L, 1);

                    b.Property<string>("DeveloperEmailMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeveloperFirstNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeveloperLastNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeveloperMiddleNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeveloperPreferredNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeveloperID");

                    b.ToTable("developerInfoModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.EASuportInfoModel", b =>
                {
                    b.Property<string>("EaID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EaEmailMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EaFirstNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EaLastNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EaMiddleNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EaPhoneMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EaPreferredNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EaStudentManaged")
                        .HasColumnType("int");

                    b.HasKey("EaID");

                    b.ToTable("eASuportInfoModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.ExtendedAvesBellScheduleModel", b =>
                {
                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("BellName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.HasKey("StartTime");

                    b.ToTable("extendedAvesModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.FastPassModel", b =>
                {
                    b.Property<string>("FastPassIDMod")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BellNumber")
                        .HasColumnType("int");

                    b.Property<int>("CourseIDFromStudentSchedule")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EndLocationID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StartLocationID")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("StudentNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FastPassIDMod");

                    b.HasIndex("CourseIDFromStudentSchedule");

                    b.HasIndex("EndLocationID");

                    b.HasIndex("StudentID");

                    b.ToTable("fastPassModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.HallPassInfoModel", b =>
                {
                    b.Property<string>("HallPassID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BellNumber")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HallPassAddressedByID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HallPassAssignedByID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("HallPassID");

                    b.HasIndex("HallPassAddressedByID");

                    b.HasIndex("HallPassAssignedByID");

                    b.HasIndex("StudentID");

                    b.ToTable("hallPassInfoModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.LawEnforcementInfoModel", b =>
                {
                    b.Property<string>("LawenfID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LaweEmailMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaweFirstNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaweLastNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LaweMiddleNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LawePhoneMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LawePreferredNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LawenfID");

                    b.ToTable("lawEnforcementInfoModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.NurseInfoModel", b =>
                {
                    b.Property<string>("NurseID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NurseEmailMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseFirstNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseLastNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseMiddleNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NursePhoneMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NursePreferredNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NurseID");

                    b.ToTable("nurseInfoModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.PassRequestInfoModel", b =>
                {
                    b.Property<int>("PassRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PassRequestId"), 1L, 1);

                    b.Property<int>("BellNumber")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HallPassAddressedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HallPassAssignedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("StudentNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PassRequestId");

                    b.HasIndex("HallPassAddressedBy");

                    b.HasIndex("HallPassAssignedBy");

                    b.HasIndex("StudentID");

                    b.ToTable("passRequestInfoModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.PepRallyBellScheduleModel", b =>
                {
                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("BellName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.HasKey("StartTime");

                    b.ToTable("pepRallyBellScheduleModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.RoomLocationInfoModel", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"), 1L, 1);

                    b.Property<string>("RoomAssignedToTeacherID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoomCodeMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomNumberMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomScannerId")
                        .HasColumnType("int");

                    b.Property<string>("WingNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.HasIndex("RoomAssignedToTeacherID")
                        .IsUnique();

                    b.ToTable("roomLocationInfoModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.RoomScheduleModel", b =>
                {
                    b.Property<int>("RoomScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomScheduleID"), 1L, 1);

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleID")
                        .HasColumnType("int");

                    b.Property<string>("TeacherID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoomScheduleID");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.HasIndex("ScheduleID")
                        .IsUnique();

                    b.HasIndex("TeacherID");

                    b.ToTable("roomScheduleModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.StudentInfoModel", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentID"), 1L, 1);

                    b.Property<int>("ActivationCode")
                        .HasColumnType("int");

                    b.Property<string>("EASuportEaID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("HasEASupport")
                        .HasColumnType("bit");

                    b.Property<string>("Parentguard1EmailMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parentguard1NameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parentguard2EmailMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parentguard2NameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentCounselorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentEAID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentEmailMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentFirstNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StudentGradYearMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentLastNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentMiddleNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentPhoneMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentPreferredNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentID");

                    b.HasIndex("ActivationCode")
                        .IsUnique();

                    b.HasIndex("EASuportEaID");

                    b.HasIndex("StudentCounselorID");

                    b.HasIndex("StudentEAID")
                        .IsUnique();

                    b.ToTable("studentInfoModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.StudentScheduleInfoModel", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("AvesBellRoomCodeMod")
                        .HasColumnType("int");

                    b.Property<int>("Bell1EnrollmentCodeMod")
                        .HasColumnType("int");

                    b.Property<int>("Bell2EnrollmentCodeMod")
                        .HasColumnType("int");

                    b.Property<int>("Bell3EnrollmentCodeMod")
                        .HasColumnType("int");

                    b.Property<int>("Bell4EnrollmentCodeMod")
                        .HasColumnType("int");

                    b.Property<int>("Bell5EnrollmentCodeMod")
                        .HasColumnType("int");

                    b.Property<int>("Bell6EnrollmentCodeMod")
                        .HasColumnType("int");

                    b.Property<int>("Bell7EnrollmentCodeMod")
                        .HasColumnType("int");

                    b.Property<string>("LunchCodeMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("StudentID");

                    b.ToTable("studentScheduleInfoModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.SubstituteInfoModel", b =>
                {
                    b.Property<string>("SubID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ManagedTeacherIdMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubEmailMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubFirstNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubLastNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubMiddleNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubPhoneMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubPreferredNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubID");

                    b.HasIndex("ManagedTeacherIdMod")
                        .IsUnique();

                    b.ToTable("substituteInfoModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.SynnLabQRNodeModel", b =>
                {
                    b.Property<string>("ScannerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModelNumberMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScannerDeviceIPAddressMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScannerLabelMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScannerMacAddressMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SynnlabRoomIDMod")
                        .HasColumnType("int");

                    b.HasKey("ScannerID");

                    b.HasIndex("SynnlabRoomIDMod")
                        .IsUnique();

                    b.ToTable("synnLabQRNodeModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.TeacherInfoModel", b =>
                {
                    b.Property<string>("TeacherID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeacherEmailMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherFirstNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherLastNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherMiddleNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherPhoneMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherPreferredNameMod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Teaches5Days")
                        .HasColumnType("bit");

                    b.Property<int>("TeachingScheduleID")
                        .HasColumnType("int");

                    b.HasKey("TeacherID");

                    b.ToTable("teacherInfoModels", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.TeachingScheduleModel", b =>
                {
                    b.Property<int>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleID"), 1L, 1);

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ScheduleID");

                    b.HasIndex("TeacherID")
                        .IsUnique();

                    b.ToTable("TeachingScheduleModel", (string)null);
                });

            modelBuilder.Entity("SAMS.Models.TwoHrDelayBellScheduleModel", b =>
                {
                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("BellName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.HasKey("StartTime");

                    b.ToTable("twoHrDelayBellScheduleModels", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SAMS.Models.ActiveCourseInfoModel", b =>
                {
                    b.HasOne("SAMS.Models.RoomLocationInfoModel", "Room")
                        .WithMany("ActiveCourseInfos")
                        .HasForeignKey("CourseRoomID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.TeacherInfoModel", "Teacher")
                        .WithMany("ActiveCourses")
                        .HasForeignKey("CourseTeacherID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.SubstituteInfoModel", "Substitute")
                        .WithMany()
                        .HasForeignKey("SubstituteSubID");

                    b.Navigation("Room");

                    b.Navigation("Substitute");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SAMS.Models.BellAttendanceModel", b =>
                {
                    b.HasOne("SAMS.Models.StudentInfoModel", "StudentInfo")
                        .WithMany("BellAttendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StudentInfo");
                });

            modelBuilder.Entity("SAMS.Models.CourseEnrollmentModel", b =>
                {
                    b.HasOne("SAMS.Models.ActiveCourseInfoModel", "ActiveCourses")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("EnrollmentCourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.StudentInfoModel", "Student")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("EnrollmentStudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.StudentScheduleInfoModel", "StudentSchedules")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("EnrollmentStudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ActiveCourses");

                    b.Navigation("Student");

                    b.Navigation("StudentSchedules");
                });

            modelBuilder.Entity("SAMS.Models.DailyAttendanceModel", b =>
                {
                    b.HasOne("SAMS.Models.StudentInfoModel", "Student")
                        .WithMany("DailyAttendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SAMS.Models.FastPassModel", b =>
                {
                    b.HasOne("SAMS.Models.StudentScheduleInfoModel", "StudentSchedule")
                        .WithMany("FastPasses")
                        .HasForeignKey("CourseIDFromStudentSchedule")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.RoomLocationInfoModel", "Room")
                        .WithMany("FastPassesIssued")
                        .HasForeignKey("EndLocationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.StudentInfoModel", "Student")
                        .WithMany("FastPasses")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Student");

                    b.Navigation("StudentSchedule");
                });

            modelBuilder.Entity("SAMS.Models.HallPassInfoModel", b =>
                {
                    b.HasOne("SAMS.Models.AdminInfoModel", "AddressedByAdmin")
                        .WithMany("AddressedHallPasses")
                        .HasForeignKey("HallPassAddressedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.AttendanceOfficeMemberModel", "AddressedByAttendanceOfficeMember")
                        .WithMany("AddressedHallPasses")
                        .HasForeignKey("HallPassAddressedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.CounselorModel", "AddressedByCounselor")
                        .WithMany("AddressedHallPasses")
                        .HasForeignKey("HallPassAddressedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.LawEnforcementInfoModel", "AddressedByLawEnf")
                        .WithMany("AddressedHallPasses")
                        .HasForeignKey("HallPassAddressedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.NurseInfoModel", "AddressedByNurse")
                        .WithMany("AddressedHallPasses")
                        .HasForeignKey("HallPassAddressedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.TeacherInfoModel", "AddressedByTeacher")
                        .WithMany("AddressedHallPasses")
                        .HasForeignKey("HallPassAddressedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.AdminInfoModel", "AssignedByAdmin")
                        .WithMany("AssignedHallPasses")
                        .HasForeignKey("HallPassAssignedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.AttendanceOfficeMemberModel", "AssignedByAttendanceOfficeMember")
                        .WithMany("AssignedHallPasses")
                        .HasForeignKey("HallPassAssignedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.CounselorModel", "AssignedByCounselor")
                        .WithMany("AssignedHallPasses")
                        .HasForeignKey("HallPassAssignedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.LawEnforcementInfoModel", "AssignedByLawEnf")
                        .WithMany("AssignedHallPasses")
                        .HasForeignKey("HallPassAssignedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.NurseInfoModel", "AssignedByNurse")
                        .WithMany("AssignedHallPasses")
                        .HasForeignKey("HallPassAssignedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.TeacherInfoModel", "AssignedByTeacher")
                        .WithMany("AssignedHallPasses")
                        .HasForeignKey("HallPassAssignedByID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.StudentInfoModel", "Student")
                        .WithMany("HallPasses")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AddressedByAdmin");

                    b.Navigation("AddressedByAttendanceOfficeMember");

                    b.Navigation("AddressedByCounselor");

                    b.Navigation("AddressedByLawEnf");

                    b.Navigation("AddressedByNurse");

                    b.Navigation("AddressedByTeacher");

                    b.Navigation("AssignedByAdmin");

                    b.Navigation("AssignedByAttendanceOfficeMember");

                    b.Navigation("AssignedByCounselor");

                    b.Navigation("AssignedByLawEnf");

                    b.Navigation("AssignedByNurse");

                    b.Navigation("AssignedByTeacher");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SAMS.Models.PassRequestInfoModel", b =>
                {
                    b.HasOne("SAMS.Models.AdminInfoModel", "AddressedByAdmin")
                        .WithMany("RequestAddressedHallPasses")
                        .HasForeignKey("HallPassAddressedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.AttendanceOfficeMemberModel", "AddressedByAttendanceOfficeMember")
                        .WithMany("RequestAddressedHallPasses")
                        .HasForeignKey("HallPassAddressedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.CounselorModel", "AddressedByCounselor")
                        .WithMany("RequestAddressedHallPasses")
                        .HasForeignKey("HallPassAddressedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.LawEnforcementInfoModel", "AddressedByLawEnf")
                        .WithMany("RequestAddressedHallPasses")
                        .HasForeignKey("HallPassAddressedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.NurseInfoModel", "AddressedByNurse")
                        .WithMany("RequestAddressedHallPasses")
                        .HasForeignKey("HallPassAddressedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.TeacherInfoModel", "AddressedByTeacher")
                        .WithMany("RequestAddressedHallPasses")
                        .HasForeignKey("HallPassAddressedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.AdminInfoModel", "AssignedByAdmin")
                        .WithMany("RequestAssignedHallPasses")
                        .HasForeignKey("HallPassAssignedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.AttendanceOfficeMemberModel", "AssignedByAttendanceOfficeMember")
                        .WithMany("RequestAssignedHallPasses")
                        .HasForeignKey("HallPassAssignedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.CounselorModel", "AssignedByCounselor")
                        .WithMany("RequestAssignedHallPasses")
                        .HasForeignKey("HallPassAssignedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.LawEnforcementInfoModel", "AssignedByLawEnf")
                        .WithMany("RequestAssignedHallPasses")
                        .HasForeignKey("HallPassAssignedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.NurseInfoModel", "AssignedByNurse")
                        .WithMany("RequestAssignedHallPasses")
                        .HasForeignKey("HallPassAssignedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.TeacherInfoModel", "AssignedByTeacher")
                        .WithMany("RequestAssignedHallPasses")
                        .HasForeignKey("HallPassAssignedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.StudentInfoModel", "Student")
                        .WithMany("PassRequestsForStudent")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AddressedByAdmin");

                    b.Navigation("AddressedByAttendanceOfficeMember");

                    b.Navigation("AddressedByCounselor");

                    b.Navigation("AddressedByLawEnf");

                    b.Navigation("AddressedByNurse");

                    b.Navigation("AddressedByTeacher");

                    b.Navigation("AssignedByAdmin");

                    b.Navigation("AssignedByAttendanceOfficeMember");

                    b.Navigation("AssignedByCounselor");

                    b.Navigation("AssignedByLawEnf");

                    b.Navigation("AssignedByNurse");

                    b.Navigation("AssignedByTeacher");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SAMS.Models.RoomLocationInfoModel", b =>
                {
                    b.HasOne("SAMS.Models.TeacherInfoModel", "Teacher")
                        .WithOne("Room")
                        .HasForeignKey("SAMS.Models.RoomLocationInfoModel", "RoomAssignedToTeacherID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SAMS.Models.RoomScheduleModel", b =>
                {
                    b.HasOne("SAMS.Models.RoomLocationInfoModel", "Room")
                        .WithOne("RoomSchedule")
                        .HasForeignKey("SAMS.Models.RoomScheduleModel", "RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.TeachingScheduleModel", "Schedule")
                        .WithOne("RoomSchedule")
                        .HasForeignKey("SAMS.Models.RoomScheduleModel", "ScheduleID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.TeacherInfoModel", "Teacher")
                        .WithMany("RoomSchedules")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Schedule");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SAMS.Models.StudentInfoModel", b =>
                {
                    b.HasOne("SAMS.Models.ActivationModel", "ActivationCodes")
                        .WithOne("Student")
                        .HasForeignKey("SAMS.Models.StudentInfoModel", "ActivationCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.EASuportInfoModel", "EASuport")
                        .WithMany()
                        .HasForeignKey("EASuportEaID");

                    b.HasOne("SAMS.Models.CounselorModel", "Counselor")
                        .WithMany("CounselorManagedStudents")
                        .HasForeignKey("StudentCounselorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.EASuportInfoModel", "AssignedEASuport")
                        .WithOne("Student")
                        .HasForeignKey("SAMS.Models.StudentInfoModel", "StudentEAID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ActivationCodes");

                    b.Navigation("AssignedEASuport");

                    b.Navigation("Counselor");

                    b.Navigation("EASuport");
                });

            modelBuilder.Entity("SAMS.Models.StudentScheduleInfoModel", b =>
                {
                    b.HasOne("SAMS.Models.StudentInfoModel", "Student")
                        .WithOne("StudentSchedule")
                        .HasForeignKey("SAMS.Models.StudentScheduleInfoModel", "StudentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SAMS.Models.BellAttendanceModel", "BellAttendance")
                        .WithOne("StudentScheduleInfoModel")
                        .HasForeignKey("SAMS.Models.StudentScheduleInfoModel", "StudentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BellAttendance");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SAMS.Models.SubstituteInfoModel", b =>
                {
                    b.HasOne("SAMS.Models.TeacherInfoModel", "TeacherManaged")
                        .WithOne("SubTeachers")
                        .HasForeignKey("SAMS.Models.SubstituteInfoModel", "ManagedTeacherIdMod")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TeacherManaged");
                });

            modelBuilder.Entity("SAMS.Models.SynnLabQRNodeModel", b =>
                {
                    b.HasOne("SAMS.Models.RoomLocationInfoModel", "Room")
                        .WithOne("SynnLabQRNode")
                        .HasForeignKey("SAMS.Models.SynnLabQRNodeModel", "SynnlabRoomIDMod")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("SAMS.Models.TeachingScheduleModel", b =>
                {
                    b.HasOne("SAMS.Models.TeacherInfoModel", "Teacher")
                        .WithOne("TeachingSchedule")
                        .HasForeignKey("SAMS.Models.TeachingScheduleModel", "TeacherID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SAMS.Models.ActivationModel", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("SAMS.Models.ActiveCourseInfoModel", b =>
                {
                    b.Navigation("CourseEnrollments");
                });

            modelBuilder.Entity("SAMS.Models.AdminInfoModel", b =>
                {
                    b.Navigation("AddressedHallPasses");

                    b.Navigation("AssignedHallPasses");

                    b.Navigation("RequestAddressedHallPasses");

                    b.Navigation("RequestAssignedHallPasses");
                });

            modelBuilder.Entity("SAMS.Models.AttendanceOfficeMemberModel", b =>
                {
                    b.Navigation("AddressedHallPasses");

                    b.Navigation("AssignedHallPasses");

                    b.Navigation("RequestAddressedHallPasses");

                    b.Navigation("RequestAssignedHallPasses");
                });

            modelBuilder.Entity("SAMS.Models.BellAttendanceModel", b =>
                {
                    b.Navigation("StudentScheduleInfoModel");
                });

            modelBuilder.Entity("SAMS.Models.CounselorModel", b =>
                {
                    b.Navigation("AddressedHallPasses");

                    b.Navigation("AssignedHallPasses");

                    b.Navigation("CounselorManagedStudents");

                    b.Navigation("RequestAddressedHallPasses");

                    b.Navigation("RequestAssignedHallPasses");
                });

            modelBuilder.Entity("SAMS.Models.EASuportInfoModel", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("SAMS.Models.LawEnforcementInfoModel", b =>
                {
                    b.Navigation("AddressedHallPasses");

                    b.Navigation("AssignedHallPasses");

                    b.Navigation("RequestAddressedHallPasses");

                    b.Navigation("RequestAssignedHallPasses");
                });

            modelBuilder.Entity("SAMS.Models.NurseInfoModel", b =>
                {
                    b.Navigation("AddressedHallPasses");

                    b.Navigation("AssignedHallPasses");

                    b.Navigation("RequestAddressedHallPasses");

                    b.Navigation("RequestAssignedHallPasses");
                });

            modelBuilder.Entity("SAMS.Models.RoomLocationInfoModel", b =>
                {
                    b.Navigation("ActiveCourseInfos");

                    b.Navigation("FastPassesIssued");

                    b.Navigation("RoomSchedule");

                    b.Navigation("SynnLabQRNode");
                });

            modelBuilder.Entity("SAMS.Models.StudentInfoModel", b =>
                {
                    b.Navigation("BellAttendances");

                    b.Navigation("CourseEnrollments");

                    b.Navigation("DailyAttendances");

                    b.Navigation("FastPasses");

                    b.Navigation("HallPasses");

                    b.Navigation("PassRequestsForStudent");

                    b.Navigation("StudentSchedule");
                });

            modelBuilder.Entity("SAMS.Models.StudentScheduleInfoModel", b =>
                {
                    b.Navigation("CourseEnrollments");

                    b.Navigation("FastPasses");
                });

            modelBuilder.Entity("SAMS.Models.TeacherInfoModel", b =>
                {
                    b.Navigation("ActiveCourses");

                    b.Navigation("AddressedHallPasses");

                    b.Navigation("AssignedHallPasses");

                    b.Navigation("RequestAddressedHallPasses");

                    b.Navigation("RequestAssignedHallPasses");

                    b.Navigation("Room");

                    b.Navigation("RoomSchedules");

                    b.Navigation("SubTeachers");

                    b.Navigation("TeachingSchedule");
                });

            modelBuilder.Entity("SAMS.Models.TeachingScheduleModel", b =>
                {
                    b.Navigation("RoomSchedule");
                });
#pragma warning restore 612, 618
        }
    }
}
