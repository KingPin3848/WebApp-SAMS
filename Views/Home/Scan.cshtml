@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}


<h1>Scan from WebCam:</h1>
<div id="video-container">
    <video id="qr-video"></video>
</div>
<br />
<h5 id="textdanger" class="text-danger"></h5>

<b>Detected QR code: </b>
<span id="cam-qr-result">None</span>
<br />
<b>Last detected at: </b>
<span id="cam-qr-result-timestamp"></span>
<br />
<button id="start-button" onclick="start()">Start</button>
<button id="stop-button" onclick="stop()">Stop</button>
<hr />

@* <script src="~/js/qr-scanner.umd.min.js"></script>
<script src="~/js/qr-scanner-worker.min.js"></script>
<script src="~/js/qr-scanner.legacy.min.js"></script> *@
<script src="~/nodebox/qr-scanner.umd.min.js"></script>
<script type="module">
    import QrScanner from "/js/qr-scanner.min.js";
    const video = document.getElementById("qr-video");
    const videoContainer = document.getElementById("video-container");
    const camHasCamera = document.getElementById("cam-has-camera");
    const camList = document.getElementById("cam-list");
    const camHasFlash = document.getElementById("cam-has-flash");
    const flashToggle = document.getElementById("flash-toggle");
    const flashState = document.getElementById("flash-state");
    const camQrResult = document.getElementById("cam-qr-result");
    const camQrResultTimestamp = document.getElementById(
        "cam-qr-result-timestamp"
    );
    const fileSelector = document.getElementById("file-selector");
    const fileQrResult = document.getElementById("file-qr-result");
    function setResult(label, result) {
        console.log(result.data);
        label.textContent = result.data;
        camQrResultTimestamp.textContent = new Date().toString();
        label.style.color = "teal";
        clearTimeout(label.highlightTimeout);
        label.highlightTimeout = setTimeout(
            () => (label.style.color = "inherit"),
            100
        );
    }
    // ####### Web Cam Scanning #######
    const scanner = new QrScanner(
        video,
        (result) => { 
            setResult(camQrResult, result);
                sendScannedData(result);
        },
        {
            onDecodeError: (error) => {
                camQrResult.textContent = error;
                camQrResult.style.color = "inherit";
            },
            highlightScanRegion: true,
            highlightCodeOutline: true,
        }
    );
    const updateFlashAvailability = () => {
        scanner.hasFlash().then((hasFlash) => {
            camHasFlash.textContent = hasFlash;
            flashToggle.style.display = hasFlash ? "inline-block" : "none";
        });
    };
    scanner.start().then(() => {
        updateFlashAvailability();
        // List cameras after the scanner started to avoid listCamera's stream and the scanner's stream being requested
        // at the same time which can result in listCamera's unconstrained stream also being offered to the scanner.
        // Note that we can also start the scanner after listCameras, we just have it this way around in the demo to
        // start the scanner earlier.
        QrScanner.listCameras(true).then((cameras) =>
            cameras.forEach((camera) => {
                const option = document.createElement("option");
                option.value = camera.id;
                option.text = camera.label;
                camList.add(option);
            })
        );
    });
    QrScanner.hasCamera().then(
        (hasCamera) => (camHasCamera.textContent = hasCamera)
    );
    // for debugging
    window.scanner = scanner;
    document
        .getElementById("scan-region-highlight-style-select")
        .addEventListener("change", (e) => {
            videoContainer.className = e.target.value;
            scanner._updateOverlay(); // reposition the highlight because style 2 sets position: relative
        });
    document
        .getElementById("show-scan-region")
        .addEventListener("change", (e) => {
            const input = e.target;
            const label = input.parentNode;
            label.parentNode.insertBefore(scanner.$canvas, label.nextSibling);
            scanner.$canvas.style.display = input.checked ? "block" : "none";
        });
    document
        .getElementById("inversion-mode-select")
        .addEventListener("change", (event) => {
            scanner.setInversionMode(event.target.value);
        });
    camList.addEventListener("change", (event) => {
        scanner.setCamera(event.target.value).then(updateFlashAvailability);
    });
    flashToggle.addEventListener("click", () => {
        scanner
            .toggleFlash()
            .then(
                () => (flashState.textContent = scanner.isFlashOn() ? "on" : "off")
            );
    });
    document.getElementById("start-button").addEventListener("click", () => {
        scanner.start();
    });
    document.getElementById("stop-button").addEventListener("click", () => {
        scanner.stop();
    });
    
    function sendScannedData(result) {
        var schoolId = @ViewBag.Schoolid;

        //Transferring qr code string to controller
        var qrCodeData = result.data;
        var start = HTMLTimeElement
        var qrCodeDataTimestamp = new Date;
        var date = new Date();
        var hours = date.getUTCHours();
        var minutes = date.getUTCMinutes();
        var seconds = date.getUTCSeconds();
        var milliseconds = date.getUTCMilliseconds();

        var formattedTime = `${hours < 10 ? '0' : ''}${hours}:${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}.${milliseconds < 100 ? '0' : ''}${milliseconds < 10 ? '0' : ''}${milliseconds}`;

        var data = {
            'ScannedCode': qrCodeData,
            'ScannedCodeTimestamp': formattedTime,
            'issuedSchoolId': schoolId
        };

        $.ajax({
            url: '@Url.Action("Scan","Home")',
            type: 'POST',
            data: data,
            success: function (response) {
                if (response.redirectUrl) {
                    window.location.href = response.redirectUrl;
                }
            }, error: function (response) {
                if (response.dangertext) {
                    alert(response.textdanger);
                    document.getElementById("textdanger").textContent = response.textdanger;
                    console.log(response);
                }
            }
        });
    }

    // //Transering qr code string to controller
    // var qrCodeData = camQrResult.textContent;
    // var qrCodeDataTimestamp = camQrResultTimestamp.textContent;

    // var data = {
    //     'ScannedCode': qrCodeData,
    //     'ScannedCodeTimestamp': qrCodeDataTimestamp,
    //     'issuedSchoolId': schoolId
    // };
    // $.ajax({
    //     url: '/Home/Scan',
    //     type: 'POST',
    //     data: data,
    //     success: function (response) {
    //         console.log(response);
    //     }, error: function (response) {
    //         console.log(response);
    //     }
    // });
</script>
<style>
    div {
        margin-bottom: 16px;
    }

    #video-container {
        line-height: 0;
    }

        #video-container.example-style-1 .scan-region-highlight-svg,
        #video-container.example-style-1 .code-outline-highlight {
            stroke: #64a2f3 !important;
        }

        #video-container.example-style-2 {
            position: relative;
            width: max-content;
            height: max-content;
            overflow: hidden;
        }

            #video-container.example-style-2 .scan-region-highlight {
                border-radius: 30px;
                outline: rgba(0, 0, 0, 0.25) solid 50vmax;
            }

            #video-container.example-style-2 .scan-region-highlight-svg {
                display: none;
            }

            #video-container.example-style-2 .code-outline-highlight {
                stroke: rgba(255, 255, 255, 0.5) !important;
                stroke-width: 15 !important;
                stroke-dasharray: none !important;
            }

    #flash-toggle {
        display: none;
    }

    hr {
        margin-top: 32px;
    }

    input[type="file"] {
        display: block;
        margin-bottom: 16px;
    }
</style>